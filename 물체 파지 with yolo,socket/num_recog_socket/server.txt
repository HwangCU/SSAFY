import rclpy
from rclpy.node import Node
from std_msgs.msg import String

import socket
import threading

import time

def start_yolov5_server(host='0.0.0.0', port=65432):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((host, port))
        s.listen()
        print(f"Server is listening on {host}: {port}...")

        conn, addr = s.accept()
        print(f"Connected by {addr}")
        return conn
    



class ObjectDetectionSubscriber(Node):
    def __init__(self):
        super().__init__('object_detection_subscriber')
        # Topic sub
        self.subscription = self.create_subscription(
            String,
            '/detected_labels',
            self.listener_callback,
            10
        )
        # 서버에 연결이 잘 되었는지 확인하는 필드
        self.conv_server_conn = False
        # 버퍼를 만들어 놓고 동일한 객체의 개수가 12개 이상이면 명령을 날리기 위함
        self.detection_buffer = []
        self.buffer_size = 20
        self.detection_threshold = 12

        self.get_logger().info("Object Detection Subscriber has started.")

        # Conveyor Server On
        server_thread = threading.Thread(target=self.start_conveyor_in_thread)
        server_thread.daemon = True
        server_thread.start()

    def listener_callback(self, msg):
        detection_results = msg.data
        if detection_results:
            self.get_logger().info(f"Received detection results: {detection_results}")

        # detected_objects -> list
        detected_objects = self.parse_detection_results(detection_results)

        if len(detected_objects) != 0:
            for obj in detected_objects:
                self.detection_buffer.append(obj)

        
        if len(self.detection_buffer) > self.buffer_size:
            self.detection_buffer.pop(0)
        
        self.check_object_detection()

    def check_object_detection(self):
        if len(self.detection_buffer) >= self.detection_threshold:
            self.perform_task_for_object()

    def parse_detection_results(self, detection_results):
        try:
            if not detection_results:
                # self.get_logger().warn("Empty detection results received.")
                return []
            detected_objects = [obj.strip() for obj in detection_results.split(',')]
            return detected_objects
        except Exception as e:
            self.get_logger().error(f"Unexpected error: {e}")
            return []

    # object name -> task run
    def perform_task_for_object(self):
        #self.get_logger().info(f"{label} detected! Performing task...")

        self.perform_task()

        self.detection_buffer = []
    

    # task run : board panel
    def perform_task(self):
        self.get_logger().info("Executing task for board panel")

        self.wait_for_yolov5_server_connection()

        if self.conv_server_conn:
            self.handle_yolov5_client(self.conv_server_conn)

        time.sleep(5)


    def handle_yolov5_client(self, conn):
        for label in self.detection_buffer:
            conn.sendall(label.encode('utf-8'))
            print(f"Sent command {label} to the client.")

    def start_conveyor_in_thread(self):
        self.conv_server_conn = start_yolov5_server()
    
    def wait_for_yolov5_server_connection(self, timeout=10):
        start_time = time.time()

        while self.conv_server_conn is None and time.time() - start_time < timeout:
            self.get_logger().info("Waiting for server connection...")
            time.sleep(1)
        
        if self.conv_server_conn is None:
            self.get_logger().error("Failed to establish server connection within timeout.")
        else:
            self.get_logger().info("Conveyor Server connection established.")

def main(args=None):
    rclpy.init(args=args)
    node = ObjectDetectionSubscriber()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass

    rclpy.shutdown()

if __name__ == '__main__':
    main()